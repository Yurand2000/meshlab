/****************************************************************************
* MeshLab                                                           o o     *
* A versatile mesh processing toolbox                             o     o   *
*                                                                _   O  _   *
* Copyright(C) 2005                                                \/)\/    *
* Visual Computing Lab                                            /\/|      *
* ISTI - Italian National Research Council                           |      *
*                                                                    \      *
* All rights reserved.                                                      *
*                                                                           *
* This program is free software; you can redistribute it and/or modify      *   
* it under the terms of the GNU General Public License as published by      *
* the Free Software Foundation; either version 2 of the License, or         *
* (at your option) any later version.                                       *
*                                                                           *
* This program is distributed in the hope that it will be useful,           *
* but WITHOUT ANY WARRANTY; without even the implied warranty of            *
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the             *
* GNU General Public License (http://www.gnu.org/licenses/gpl.txt)          *
* for more details.                                                         *
*                                                                           *
****************************************************************************/

#include "SkeletonizeFilter.h"
#include "cgalAdapter/CGALMeshSkeletonizer.h"

// default values
#define MAX_ITERATIONS_DEFAULT 100
#define GENERATE_INTERMEDIATE_MESHES_DEFAULT false
#define MIN_EDGE_LENGTH_MIN_VALUE Scalarm(0)
// other default values are taken from the defaults
// generated by the mesh skeletonizer parameter class

// displayed strings
#define GENERIC_CATEGORY "(1) Convergence"
#define MAX_ITERATIONS_DISPLAYNAME "Maximum number of iterations"
#define MAX_ITERATIONS_DESCRIPTION ""
#define DELTA_AREA_TERMINATION_DISPLAYNAME "Area Variation Factor"
#define DELTA_AREA_TERMINATION_DESCRIPTION "The convergence is considered to be reached if the variation of the area of the meso-skeleton after one iteration is smaller than the area variation factor times the original area of the mesh. It must be positive and its unit is in squared application units (Example: if the mesh unit is meters, this value will be in square meters)."
#define GENERATE_INTERMEDIATE_MESHES_DISPLAYNAME "Generate Intermediate Meso-Skeletons"
#define GENERATE_INTERMEDIATE_MESHES_DESCRIPTION ""

#define LOCAL_REMESHING_CATEGORY "(2) Local Remeshing"
#define MAX_ANGLE_DISPLAYNAME "Max Triangle Angle"
#define MAX_ANGLE_DESCRIPTION "During remeshing steps, a edge will be split if its opposite vertex (on the incident triangle) has angle greater than the given value. The default angle mentioned in the paper is 110 degrees. It is not really considered as a parameter in the paper itself, so most users might leave it as is. Angle in degrees, must be between 90 and 180 degrees."
#define MIN_EDGE_LENGTH_DISPLAYNAME "Min edge length for collapsing"
#define MIN_EDGE_LENGTH_DESCRIPTION "Collapses edges whose length is lower than the threshold (absolute length or percentage of bbox diagonal)."

#define VERTEX_MOTION_OPTIONS_CATEGORY "(3) Local Remeshing"
#define QUALITY_SPEED_TRADEOFF_DISPLAYNAME "Quality-Speed Tradeoff (Omega_H)"
#define QUALITY_SPEED_TRADEOFF_DESCRIPTION "Balances velocity of motion and approximation quality. It must be a positive value. Higher values result in faster convergence at the price of a coarser skeleton."
#define USE_MEDIALLY_CENTERING_DISPLAYNAME "Enable Medially Centering"
#define USE_MEDIALLY_CENTERING_DESCRIPTION "If true, the meso-skeleton placement will be attracted by an approximation of the medial axis of the mesh during the contraction steps, and so will be the result skeleton."
#define MEDIALLY_CENTERING_VALUE_DISPLAYNAME "Medially Centering Tradeoff (Omega_M)"
#define MEDIALLY_CENTERING_VALUE_DESCRIPTION "Controls attraction to the medial axis. It must be a positive value. Lower values result in a skeleton closer to the medial axis and more detailed (and slower convergence), while higher values result in a coarser skeleton (and faster convergence)."

namespace curvatureSkeleton
{

static Scalarm getMinEdgeLength_DefaultMaxValue(MeshModel const&);

RichParameterList SkeletonizeFilter::initParameterList(FilterPlugin const&, MeshModel const& m)
{
	RichParameterList parlst;

	auto defaults = CGALMeshSkeletonizer::Parameters(m.cm);
	parlst.addParam(RichInt(PARAM_MAX_ITERATIONS, MAX_ITERATIONS_DEFAULT, MAX_ITERATIONS_DISPLAYNAME, MAX_ITERATIONS_DESCRIPTION, false, GENERIC_CATEGORY));
	parlst.addParam(RichDynamicFloat(PARAM_DELTA_AREA_TERMINATION, defaults.delta_area_threshold, 0, 1, DELTA_AREA_TERMINATION_DISPLAYNAME, DELTA_AREA_TERMINATION_DESCRIPTION, true, GENERIC_CATEGORY));
	parlst.addParam(RichBool(PARAM_GENERATE_INTERMEDIATE_MESHES, GENERATE_INTERMEDIATE_MESHES_DEFAULT, GENERATE_INTERMEDIATE_MESHES_DISPLAYNAME, GENERATE_INTERMEDIATE_MESHES_DESCRIPTION, true, GENERIC_CATEGORY));
	
	parlst.addParam(RichDynamicFloat(PARAM_MAX_ANGLE, defaults.max_triangle_angle, 90, 180, MAX_ANGLE_DISPLAYNAME, MAX_ANGLE_DESCRIPTION, true, LOCAL_REMESHING_CATEGORY));
	parlst.addParam(RichPercentage(PARAM_MIN_EDGE_LENGTH, defaults.min_edge_length, MIN_EDGE_LENGTH_MIN_VALUE, getMinEdgeLength_DefaultMaxValue(m), MIN_EDGE_LENGTH_DISPLAYNAME, MIN_EDGE_LENGTH_DESCRIPTION, false, LOCAL_REMESHING_CATEGORY));

	parlst.addParam(RichFloat(PARAM_QUALITY_TRADEOFF, defaults.quality_speed_tradeoff, QUALITY_SPEED_TRADEOFF_DISPLAYNAME, QUALITY_SPEED_TRADEOFF_DESCRIPTION, false, VERTEX_MOTION_OPTIONS_CATEGORY));
	parlst.addParam(RichBool(PARAM_ENABLE_MEDIALLY_CENTERING, (defaults.medially_centering_speed_tradeoff > 0), USE_MEDIALLY_CENTERING_DISPLAYNAME, USE_MEDIALLY_CENTERING_DESCRIPTION, true, VERTEX_MOTION_OPTIONS_CATEGORY));
	parlst.addParam(RichFloat(PARAM_MEDIALLY_CENTERING_TRADEOFF, defaults.medially_centering_speed_tradeoff, MEDIALLY_CENTERING_VALUE_DISPLAYNAME, MEDIALLY_CENTERING_VALUE_DESCRIPTION, false, VERTEX_MOTION_OPTIONS_CATEGORY));

	return parlst;
}

Scalarm getMinEdgeLength_DefaultMaxValue(MeshModel const& mesh)
{
	return mesh.cm.bbox.Diag();
}

}
