/****************************************************************************
* MeshLab                                                           o o     *
* A versatile mesh processing toolbox                             o     o   *
*                                                                _   O  _   *
* Copyright(C) 2005                                                \/)\/    *
* Visual Computing Lab                                            /\/|      *
* ISTI - Italian National Research Council                           |      *
*                                                                    \      *
* All rights reserved.                                                      *
*                                                                           *
* This program is free software; you can redistribute it and/or modify      *   
* it under the terms of the GNU General Public License as published by      *
* the Free Software Foundation; either version 2 of the License, or         *
* (at your option) any later version.                                       *
*                                                                           *
* This program is distributed in the hope that it will be useful,           *
* but WITHOUT ANY WARRANTY; without even the implied warranty of            *
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the             *
* GNU General Public License (http://www.gnu.org/licenses/gpl.txt)          *
* for more details.                                                         *
*                                                                           *
****************************************************************************/

#include "skeletonize_manual.h"
#include "../cgal_adapter/mesh_skeletonizer.h"

// default values
#define MAX_ITERATIONS_DEFAULT 100
#define GENERATE_INTERMEDIATE_MESHES_DEFAULT false
#define SKELETAL_DISTANCE_TO_MESH_QUALITY_DEFAULT false
// other default values are taken from the defaults
// generated by the mesh skeletonizer parameter class

// displayed strings
#define GENERIC_CATEGORY "Algorithm Termination Options"
#define MAX_ITERATIONS_DISPLAYNAME "Max Iterations"
#define MAX_ITERATIONS_DESCRIPTION "Upper limit on the iterations of the algorithm. The algorithm will stop if no more skeletoning can be achived anyways."
#define DELTA_AREA_TERMINATION_DISPLAYNAME "Area Variation Factor"
#define DELTA_AREA_TERMINATION_DESCRIPTION "The convergence is considered to be reached if the variation of the area of the meso-skeleton after one iteration is smaller than the area variation factor times the original area of the mesh. It must be positive and its unit is in squared application units (Example: if the mesh unit is meters, this value will be in square meters)."
#define GENERATE_INTERMEDIATE_MESHES_DISPLAYNAME "Generate Intermediate Meso-Skeletons"
#define GENERATE_INTERMEDIATE_MESHES_DESCRIPTION "Generate the intermediate meso-skeletons produced by algorithm."
#define SKELETAL_DISTANCE_TO_MESH_QUALITY_DISPLAYNAME "Save Distance from Skeleton in Mesh Quality"
#define SKELETAL_DISTANCE_TO_MESH_QUALITY_DESCRIPTION "If ticked, the algorithm will alter the quality values of the vertices of the selected mesh by setting it to the Euclidean distance between the vertex and the point it has collapsed on the skeleton."

#define LOCAL_REMESHING_CATEGORY "Local Remeshing"
#define MAX_ANGLE_DISPLAYNAME "Max Triangle Angle"
#define MAX_ANGLE_DESCRIPTION "*EXTRA* During remeshing steps, a edge will be split if its opposite vertex (on the incident triangle) has angle greater than the given value. The default angle mentioned in the paper is 110 degrees. It is not really considered as a parameter in the paper itself, so most users might leave it as is. Angle in degrees, must be bigger than 90 degrees and less then 180 degrees."
#define MIN_EDGE_LENGTH_DISPLAYNAME "Min Edge Length"
#define MIN_EDGE_LENGTH_DESCRIPTION "During remeshing steps, an edge will be collapsed if its length is less than the given value. It is used to control the resulting skeleton resolution. The default length mentioned in the paper is 0.002 times the diagional of the mesh's bounding box (this value supplied here as default). This length must be positive and its unit is in application units (Example: if the mesh unit is meters, this value will be in meters too)."

#define VERTEX_MOTION_OPTIONS_CATEGORY "Vertex Motion Options"
#define QUALITY_SPEED_TRADEOFF_DISPLAYNAME "Quality-Speed Tradeoff (Omega_H)"
#define QUALITY_SPEED_TRADEOFF_DESCRIPTION "Controls the velocity of movement and approximation quality with which the algorithm resolves motion. The default value used in the paper is 20. Increasing this value makes the mean curvature flow based contraction converge faster, but results in a skeleton of lower quality. Must be positive."
#define USE_MEDIALLY_CENTERING_DISPLAYNAME "Enable Medially Centering"
#define USE_MEDIALLY_CENTERING_DESCRIPTION "If true, the meso-skeleton placement will be attracted by an approximation of the medial axis of the mesh during the contraction steps, and so will be the result skeleton."
#define MEDIALLY_CENTERING_VALUE_DISPLAYNAME "Medially Centering Tradeoff (Omega_M)"
#define MEDIALLY_CENTERING_VALUE_DESCRIPTION "Controls the degree to which the surface is attracted to the medial axis and the smoothness of the medial approximation. The default value used in the paper is 40. Decreasing this value results in a (less smooth) skeleton closer to the medial axis, as well as a lower convergence speed. Must be positive."

RichParameterList filterSkeletonizeManual::initParameterList(FilterPlugin const&, MeshModel const& m)
{
	RichParameterList parlst;

	auto defaults = CGalAdapter::MeshSkeletonizerParameters(m.cm);
	parlst.addParam(RichInt(PARAM_MAX_ITERATIONS, MAX_ITERATIONS_DEFAULT, MAX_ITERATIONS_DISPLAYNAME, MAX_ITERATIONS_DESCRIPTION, false, GENERIC_CATEGORY));
	parlst.addParam(RichFloat(PARAM_DELTA_AREA_TERMINATION, defaults.delta_area_threshold, DELTA_AREA_TERMINATION_DISPLAYNAME, DELTA_AREA_TERMINATION_DESCRIPTION, false, GENERIC_CATEGORY));
	parlst.addParam(RichBool(PARAM_GENERATE_INTERMEDIATE_MESHES, GENERATE_INTERMEDIATE_MESHES_DEFAULT, GENERATE_INTERMEDIATE_MESHES_DISPLAYNAME, GENERATE_INTERMEDIATE_MESHES_DESCRIPTION, false, GENERIC_CATEGORY));
	parlst.addParam(RichBool(PARAM_SAVE_SKELETAL_DISTANCE_TO_MESH_QUALITY, SKELETAL_DISTANCE_TO_MESH_QUALITY_DEFAULT, SKELETAL_DISTANCE_TO_MESH_QUALITY_DISPLAYNAME, SKELETAL_DISTANCE_TO_MESH_QUALITY_DESCRIPTION, false, GENERIC_CATEGORY));

	parlst.addParam(RichFloat(PARAM_MAX_ANGLE, defaults.max_triangle_angle, MAX_ANGLE_DISPLAYNAME, MAX_ANGLE_DESCRIPTION, false, LOCAL_REMESHING_CATEGORY));
	parlst.addParam(RichFloat(PARAM_MIN_EDGE_LENGTH, defaults.min_edge_length, MIN_EDGE_LENGTH_DISPLAYNAME, MIN_EDGE_LENGTH_DESCRIPTION, false, LOCAL_REMESHING_CATEGORY));

	parlst.addParam(RichFloat(PARAM_QUALITY_TRADEOFF, defaults.quality_speed_tradeoff, QUALITY_SPEED_TRADEOFF_DISPLAYNAME, QUALITY_SPEED_TRADEOFF_DESCRIPTION, false, VERTEX_MOTION_OPTIONS_CATEGORY));
	parlst.addParam(RichBool(PARAM_ENABLE_MEDIALLY_CENTERING, (defaults.medially_centering_speed_tradeoff > 0), USE_MEDIALLY_CENTERING_DISPLAYNAME, USE_MEDIALLY_CENTERING_DESCRIPTION, false, VERTEX_MOTION_OPTIONS_CATEGORY));
	parlst.addParam(RichFloat(PARAM_MEDIALLY_CENTERING_TRADEOFF, defaults.medially_centering_speed_tradeoff, MEDIALLY_CENTERING_VALUE_DISPLAYNAME, MEDIALLY_CENTERING_VALUE_DESCRIPTION, false, VERTEX_MOTION_OPTIONS_CATEGORY));
	return parlst;
}
